name: Build, version and tag
on:
  push:
    paths-ignore:
      - 'CHANGELOG.md'
      - 'package.json'
    branches:
      - main
jobs:
  build_version_tag:
    name: Build, version and tag
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - uses: vmware-tanzu/carvel-setup-action@v1
        with:
          only: ytt
          ytt: '0.36.0'
      - name: NPM Install
        run: npm i
      - name: Get next version
        run: |
          NEXT_VERSION_WITHOUT_V=$(npm_config_yes=true npx standard-version --dry-run | head -n 1 | sed -n -e 's/.*bumping version in .* from .* to \(.*\).*/\1/p')
          echo "NEXT_VERSION_WITHOUT_V=$NEXT_VERSION_WITHOUT_V" >> $GITHUB_ENV
          echo "NEXT_VERSION=v$NEXT_VERSION_WITHOUT_V" >> $GITHUB_ENV
      - name: Read project name
        uses: KJ002/read-yaml@1.5
        id: project-name-data
        with:
          file: './k8s/templates/values.yml'
          key-path: '["projectName"]'
      - name: Info new version
        uses: rjstone/discord-webhook-notify@v1
        with:
          severity: info
          details: 'About to build `${{ env.NEXT_VERSION }}` for project `${{ steps.project-name-data.outputs.data }}`'
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
          avatarUrl: https://cdn.discordapp.com/avatars/839863605943205949/37ee1fdc2ea3909e3e1da4d109fbfa65.webp?size=256
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - name: Create ECR repository if not exists
        run: ./.github/workflows/create-ecr-repository-if-not-exists.sh ${{ steps.project-name-data.outputs.data }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build image and push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.project-name-data.outputs.data }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$NEXT_VERSION -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$NEXT_VERSION
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      - name: Setup Kubernetes Tools
        uses: yokawasa/action-setup-kube-tools@v0.8.0
        id: kubernetes-tools
        with:
          setup-tools: |
            kubectl
            rancher
      - name: Login rancher
        run: rancher login --token ${{ secrets.RANCHER_TOKEN }} --context ${{ secrets.RANCHER_CONTEXT }} ${{ secrets.RANCHER_URL }}
      - name: Check k8s resources and create if not exists
        run: ./.github/workflows/create-k8s-if-not-exists.sh "test"
      - name: Exec standard-version and update repo
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          npm_config_yes=true npx standard-version
          git push
          git push --tags
      - name: Read CHANGELOG
        uses: BinPar/read-conventional-commit-changelog@v1
        id: changelog
        with:
          version: '${{ env.NEXT_VERSION }}'
      - name: Check out develop
        uses: actions/checkout@v2
        with:
          path: develop
          ref: develop
      - name: Update develop changelog and package.json
        run: |
          cd develop
          rm -rf CHANGELOG.md
          cp ../CHANGELOG.md ./CHANGELOG.md
          git config user.name github-actions
          git config user.email github-actions@github.com
          sed -i -e "s/\"version\": \"[^\"]*/\"version\": \"${NEXT_VERSION_WITHOUT_V}/" ./package.json
          git add .
          git commit -m "chore(version): update version and changelog"
          git push
      - name: Tag docker image as test
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.project-name-data.outputs.data }}
        run: |
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$NEXT_VERSION $ECR_REGISTRY/$ECR_REPOSITORY:test
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:test
      - name: Build tag and push success
        uses: rjstone/discord-webhook-notify@v1
        if: success()
        with:
          severity: info
          details: "The `${{ env.NEXT_VERSION }}` for project `${{ steps.project-name-data.outputs.data }}` was successfully built and tagged. CHANGELOG.md and package.json were updated too.\n${{ steps.changelog.outputs.version-changelog }}"
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
          avatarUrl: https://cdn.discordapp.com/avatars/839863605943205949/37ee1fdc2ea3909e3e1da4d109fbfa65.webp?size=256
      - name: Build tag and push failed
        uses: rjstone/discord-webhook-notify@v1
        if: failure()
        with:
          severity: error
          details: 'Build tag and push `${{ env.NEXT_VERSION }}` for project `${{ steps.project-name-data.outputs.data }}` failed'
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
          avatarUrl: https://cdn.discordapp.com/avatars/839863605943205949/37ee1fdc2ea3909e3e1da4d109fbfa65.webp?size=256
      - name: Build tag and push cancelled
        uses: rjstone/discord-webhook-notify@v1
        if: cancelled()
        with:
          severity: warn
          details: 'Build tag and push `${{ env.NEXT_VERSION }}` for project `${{ steps.project-name-data.outputs.data }}` cancelled'
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
          avatarUrl: https://cdn.discordapp.com/avatars/839863605943205949/37ee1fdc2ea3909e3e1da4d109fbfa65.webp?size=256
